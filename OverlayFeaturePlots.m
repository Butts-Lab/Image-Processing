%% Pull Images from files
[Dll1,map1] = imread("Dll1.png");
[Notch1,map2] = imread("Notch1.png");

Dll1 = imcrop(Dll1,[112, 69, 1000, 600]);
Notch1 = imcrop(Notch1,[112, 69, 1000, 600]);

[rows, columns, numberOfColorChannels] = size(Dll1);

figure()
imshow(Dll1)
axis('on', 'image');
hp = impixelinfo(); % Set up status line to see values when you mouse over the image.
drawnow;

figure()
imshow(Notch1)
axis('on', 'image');
hp = impixelinfo(); % Set up status line to see values when you mouse over the image.
drawnow;

figure()
imshowpair(Dll1,Notch1)
axis('on', 'image');
hp = impixelinfo(); % Set up status line to see values when you mouse over the image.
drawnow;

%Creates a composite RGB image showing A and B overlaid in different color bands. 
%Gray regions in the composite image show where the two images have the same intensities. 
%Magenta and green regions show where the intensities are different. This is the default method.
%% 
% Convert the image to grayscale
gray_img = rgb2gray(Notch1);

% Create a binary mask for black and white pixels
black_white_mask = gray_img == 0 | gray_img == 255;

% Count the number of pixels that are not black or white
num_non_black_white_pixels = numel(gray_img) - sum(black_white_mask(:));

disp(['Number of pixels representing cells: ', num2str(num_non_black_white_pixels)]);

%% Masking
% Set up figure properties:
% Enlarge figure to full screen.
hFig1 = gcf;
hFig1.Units = 'Normalized';
hFig1.WindowState = 'maximized';

% Create a binary image of the purple spots using code generated from the Color Thresholder app.
[binaryImage_1, maskedRGBImage_1] = createMask(Dll1);
% Display the images.
figure()
imshow(binaryImage_1, []);
axis('on', 'image');
hp = impixelinfo();
drawnow;

% Set up figure properties:
% Enlarge figure to full screen.
hFig2 = gcf;
hFig2.Units = 'Normalized';
hFig2.WindowState = 'maximized';

% Create a binary image of the purple spots using code generated from the Color Thresholder app.
[binaryImage_2, maskedRGBImage_2] = createMask(Notch1);
% Display the images.
figure()
imshow(binaryImage_2, []);
axis('on', 'image');
hp = impixelinfo();
drawnow;

%%
bothTrue = binaryImage_1 & binaryImage_2;
NumPixels = sum(bothTrue(:));
disp(['Number of pixels coexpressed: ', num2str(NumPixels)]);
disp(['Percentage of cells coexpressed: ', num2str(NumPixels/num_non_black_white_pixels)]);

%% Functions
function [BW,maskedRGBImage] = createMask(RGB)
%createMask  Threshold RGB image using auto-generated code from colorThresholder app.
%  [BW,MASKEDRGBIMAGE] = createMask(RGB) thresholds image RGB using
%  auto-generated code from the colorThresholder app. The colorspace and
%  range for each channel of the colorspace were set within the app. The
%  segmentation mask is returned in BW, and a composite of the mask and
%  original RGB images is returned in maskedRGBImage.

% Auto-generated by colorThresholder app on 22-Jan-2024
%------------------------------------------------------


% Convert RGB image to chosen color space
I = RGB;

% Define thresholds for channel 1 based on histogram settings
channel1Min = 0.000;
channel1Max = 198.000;

% Define thresholds for channel 2 based on histogram settings
channel2Min = 0.000;
channel2Max = 209.000;

% Define thresholds for channel 3 based on histogram settings
channel3Min = 0.000;
channel3Max = 255.000;

% Create mask based on chosen histogram thresholds
sliderBW = (I(:,:,1) >= channel1Min ) & (I(:,:,1) <= channel1Max) & ...
    (I(:,:,2) >= channel2Min ) & (I(:,:,2) <= channel2Max) & ...
    (I(:,:,3) >= channel3Min ) & (I(:,:,3) <= channel3Max);
BW = sliderBW;

% Initialize output masked image based on input image.
maskedRGBImage = RGB;

% Set background pixels where BW is false to zero.
maskedRGBImage(repmat(~BW,[1 1 3])) = 0;

end